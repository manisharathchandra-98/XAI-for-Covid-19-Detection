# -*- coding: utf-8 -*-
"""lime.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EsxqywtWl6LfQ__eGfAfUohhOuGYKndk
"""

import torch
import torch.nn as nn
import timm
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
from lime import lime_image
from skimage.segmentation import mark_boundaries
from torchvision import transforms

# 1. Define Model Class
class ViTModel(nn.Module):
    def __init__(self, num_classes=2):
        super(ViTModel, self).__init__()
        self.vit = timm.create_model("vit_base_patch16_224", pretrained=True)
        self.vit.head = nn.Linear(self.vit.head.in_features, num_classes)

    def forward(self, x):
        return self.vit(x)

# 2. Load the Model
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = ViTModel(num_classes=2)
model.load_state_dict(torch.load("outputs/vit_covid_model.pth", map_location=device))
model.eval().to(device)

# 3. Define Transformation and Prediction Wrapper
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.Grayscale(num_output_channels=3),
    transforms.ToTensor(),
    transforms.Normalize([0.5], [0.5])
])

def batch_predict(images):
    model.eval()
    batch = torch.stack([transform(Image.fromarray(img)).to(device) for img in images])
    with torch.no_grad():
        logits = model(batch)
        probs = torch.nn.functional.softmax(logits, dim=1)
    return probs.detach().cpu().numpy()

# 4. Load Image
img_path = "/mnt/home/sattum/vit_covid_xai/data/COVID/COVID-1.png"  # Update this
original_image = Image.open(img_path).convert("L").convert("RGB")

# 5. Apply LIME
explainer = lime_image.LimeImageExplainer()
explanation = explainer.explain_instance(
    np.array(original_image),
    batch_predict,
    top_labels=2,
    hide_color=0,
    num_samples=1000
)

# 6. Show Result
temp, mask = explanation.get_image_and_mask(
    explanation.top_labels[0],
    positive_only=True,
    num_features=10,
    hide_rest=False
)

plt.imshow(mark_boundaries(temp, mask))
plt.title("LIME Explanation")
plt.axis("off")
plt.savefig("outputs/lime_explanation.png")
plt.show()